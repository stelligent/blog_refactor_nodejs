{
   "Description" : "Creates a NodeJSApp stack",
   "AWSTemplateFormatVersion" : "2010-09-09",
   "Parameters" : {
      "PropertyNum" : {
         "Description" : "chef-solo numeric node value",
         "Type" : "String"
      },
      "PropertyStr" : {
         "Description" : "chef-solo string node value",
         "Type" : "String"
      },
      "AppName" : {
         "Type" : "String",
         "Description" : "application name"
      },
      "PropertyBool" : {
         "Description" : "chef-solo boolean node value",
         "Type" : "String"
      },
      "AWSKeyPair" : {
         "Type" : "AWS::EC2::KeyPair::KeyName",
         "Description" : "EC2 Keypair"
      },
      "ASGAvailabilityZones" : {
         "Type" : "CommaDelimitedList",
         "Description" : "The AZs the AutoScaling group will deploy to"
      },
      "VpcId" : {
         "Type" : "AWS::EC2::VPC::Id",
         "Description" : "Existing VPC ID to use"
      },
      "PropertyUrl" : {
         "Type" : "String",
         "Description" : "chef-solo url node value"
      },
      "ASGInstanceType" : {
         "Default" : "t2.micro",
         "Type" : "String",
         "Description" : "Existing VPC ID to use"
      },
      "ASGImageId" : {
         "Default" : "ami-d90d92ce",
         "Type" : "AWS::EC2::Image::Id",
         "Description" : "Existing VPC ID to use"
      },
      "ASGSubnetIds" : {
         "Description" : "The subnets the ELB will direct traffic to",
         "Type" : "CommaDelimitedList"
      }
   },
   "Resources" : {
      "alarmHigh" : {
         "Type" : "AWS::CloudWatch::Alarm",
         "Properties" : {
            "ComparisonOperator" : "GreaterThanThreshold",
            "Dimensions" : [
               {
                  "Name" : "AutoScalingGroupName",
                  "Value" : {
                     "Ref" : "autoScalingGroup"
                  }
               }
            ],
            "Period" : "60",
            "Threshold" : "75",
            "Namespace" : "AWS/EC2",
            "Statistic" : "Average",
            "AlarmDescription" : "Scale-up if CPU > 75% for 1 minutes",
            "AlarmActions" : [
               {
                  "Ref" : "scaleUpPolicy"
               }
            ],
            "MetricName" : "CPUUtilization",
            "EvaluationPeriods" : "1"
         }
      },
      "scaleUpPolicy" : {
         "Type" : "AWS::AutoScaling::ScalingPolicy",
         "Properties" : {
            "AdjustmentType" : "ChangeInCapacity",
            "Cooldown" : 300,
            "ScalingAdjustment" : "3",
            "AutoScalingGroupName" : {
               "Ref" : "autoScalingGroup"
            }
         }
      },
      "autoScalingGroup" : {
         "CreationPolicy" : {
            "ResourceSignal" : {
               "Timeout" : "PT10M",
               "Count" : "1"
            }
         },
         "Type" : "AWS::AutoScaling::AutoScalingGroup",
         "Properties" : {
            "VPCZoneIdentifier" : {
               "Ref" : "ASGSubnetIds"
            },
            "MinSize" : 1,
            "LaunchConfigurationName" : {
               "Ref" : "launchConfig"
            },
            "LoadBalancerNames" : [
               {
                  "Ref" : "loadBalancer"
               }
            ],
            "AvailabilityZones" : {
               "Ref" : "ASGAvailabilityZones"
            },
            "HealthCheckType" : "ELB",
            "MaxSize" : 3,
            "HealthCheckGracePeriod" : 300
         }
      },
      "loadBalancer" : {
         "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
         "Properties" : {
            "Listeners" : [
               {
                  "LoadBalancerPort" : 8080,
                  "InstancePort" : 8080,
                  "Protocol" : "TCP"
               }
            ],
            "Scheme" : "internal",
            "SecurityGroups" : [
               {
                  "Ref" : "securityGroup"
               }
            ],
            "HealthCheck" : {
               "Target" : "HTTP:8080/",
               "UnhealthyThreshold" : 5,
               "Interval" : 90,
               "HealthyThreshold" : 3,
               "Timeout" : 60
            },
            "Subnets" : {
               "Ref" : "ASGSubnetIds"
            },
            "CrossZone" : true,
            "ConnectionDrainingPolicy" : {
               "Enabled" : true,
               "Timeout" : 300
            }
         }
      },
      "securityGroup" : {
         "Type" : "AWS::EC2::SecurityGroup",
         "Properties" : {
            "SecurityGroupIngress" : [
               {
                  "IpProtocol" : "tcp",
                  "FromPort" : 8080,
                  "CidrIp" : "0.0.0.0/0",
                  "ToPort" : 8080
               },
               {
                  "IpProtocol" : "tcp",
                  "FromPort" : 22,
                  "ToPort" : 22,
                  "CidrIp" : "0.0.0.0/0"
               }
            ],
            "VpcId" : {
               "Ref" : "VpcId"
            },
            "GroupDescription" : "Load balancer & autoscaling group security ingress/egress"
         }
      },
      "launchConfig" : {
         "Properties" : {
            "UserData" : {
               "Fn::Base64" : {
                  "Fn::Join" : [
                     "",
                     [
                        "#!/bin/bash\napt-get update\napt-get install git -y\n\n#clone application (shallow)\ngit clone https://github.com/stelligent/blog_refactor_nodejs /opt/blog_refactor_nodejs\n\n#install chefdk\nif [ \":\" == \":$(dpkg -l | grep chefdk)\" ]; then\n  pushd /tmp\n  wget --quiet https://packages.chef.io/stable/ubuntu/12.04/chefdk_0.16.28-1_amd64.deb\n  dpkg -i chefdk_0.16.28-1_amd64.deb\n  mkdir /tmp/cookbooks\nfi\n\n#vendor required cookbooks from the Chef Supermarket\npushd /opt/blog_refactor_nodejs/pipelines/cookbooks/blog_refactor_nodejs\nberks vendor /tmp/cookbooks -d\n\ncat > /tmp/chef.json <<CHEFJSON\n{\n  \"run_list\": [\n    \"blog_refactor_nodejs\"\n  ],\n  \"blog_refactor_nodejs\": {\n    \"property_str\": \"",
                        {
                           "Ref" : "PropertyStr"
                        },
                        "\",\n    \"property_num\": ",
                        {
                           "Ref" : "PropertyNum"
                        },
                        ",\n    \"property_bool\": ",
                        {
                           "Ref" : "PropertyBool"
                        },
                        ",\n    \"property_url\": \"",
                        {
                           "Ref" : "PropertyUrl"
                        },
                        "\"\n  }\n}\nCHEFJSON\n\ncat > /tmp/solo.rb <<SOLO\n  cookbook_path ['/tmp/cookbooks', '/opt/blog_refactor_nodejs/pipelines/cookbooks']\nSOLO\n\nchef-solo -c /tmp/solo.rb -j /tmp/chef.json\ncfn-signal -e $? --stack ",
                        {
                           "Ref" : "AWS::StackName"
                        },
                        " --resource autoScalingGroup --region ",
                        {
                           "Ref" : "AWS::Region"
                        },
                        "\n"
                     ]
                  ]
               }
            },
            "ImageId" : {
               "Ref" : "ASGImageId"
            },
            "IamInstanceProfile" : {
               "Ref" : "instanceProfile"
            },
            "InstanceType" : {
               "Ref" : "ASGInstanceType"
            },
            "SecurityGroups" : [
               {
                  "Ref" : "securityGroup"
               }
            ],
            "KeyName" : {
               "Ref" : "AWSKeyPair"
            },
            "AssociatePublicIpAddress" : false
         },
         "Type" : "AWS::AutoScaling::LaunchConfiguration"
      },
      "instanceRole" : {
         "Type" : "AWS::IAM::Role",
         "Properties" : {
            "AssumeRolePolicyDocument" : {
               "Version" : "2012-10-17",
               "Statement" : [
                  {
                     "Principal" : {
                        "Service" : [
                           "ec2.amazonaws.com"
                        ]
                     },
                     "Effect" : "Allow",
                     "Action" : [
                        "sts:AssumeRole"
                     ]
                  }
               ]
            },
            "Path" : "/",
            "Policies" : [
               {
                  "PolicyDocument" : {
                     "Statement" : [
                        {
                           "Effect" : "Allow",
                           "Action" : [
                              "cloudwatch:GetMetricStatistics",
                              "cloudwatch:ListMetrics",
                              "cloudwatch:PutMetricData",
                              "ec2:DescribeTags"
                           ],
                           "Resource" : "*"
                        }
                     ],
                     "Version" : "2012-10-17"
                  },
                  "PolicyName" : "NodeJSApp-policy"
               }
            ]
         }
      },
      "scaleDownPolicy" : {
         "Type" : "AWS::AutoScaling::ScalingPolicy",
         "Properties" : {
            "AutoScalingGroupName" : {
               "Ref" : "autoScalingGroup"
            },
            "ScalingAdjustment" : "-1",
            "Cooldown" : 600,
            "AdjustmentType" : "ChangeInCapacity"
         }
      },
      "alarmLow" : {
         "Type" : "AWS::CloudWatch::Alarm",
         "Properties" : {
            "ComparisonOperator" : "LessThanThreshold",
            "Statistic" : "Average",
            "Threshold" : "30",
            "Namespace" : "AWS/EC2",
            "Dimensions" : [
               {
                  "Name" : "AutoScalingGroupName",
                  "Value" : {
                     "Ref" : "autoScalingGroup"
                  }
               }
            ],
            "Period" : "300",
            "EvaluationPeriods" : "1",
            "AlarmDescription" : "Scale-down if CPU < 30% for 5 minutes",
            "MetricName" : "CPUUtilization",
            "AlarmActions" : [
               {
                  "Ref" : "scaleDownPolicy"
               }
            ]
         }
      },
      "instanceProfile" : {
         "Type" : "AWS::IAM::InstanceProfile",
         "Properties" : {
            "Roles" : [
               {
                  "Ref" : "instanceRole"
               }
            ],
            "Path" : "/"
         }
      }
   },
   "Outputs" : {
      "DNSName" : {
         "Value" : {
            "Fn::GetAtt" : [
               "loadBalancer",
               "DNSName"
            ]
         }
      }
   }
}
